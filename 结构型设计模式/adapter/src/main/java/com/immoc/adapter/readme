适配器就是一种适配中间件，它存在于不匹配的二者之间，用于连接二者，将不匹配变得匹配，简单点理解就是平常所见的转接头，转换器之类的存在。

　　适配器模式有两种：类适配器、对象适配器、接口适配器

　　前二者在实现上有些许区别，作用一样，第三个接口适配器差别较大。

1、类适配器模式：

　　原理：通过继承来实现适配器功能。

　　当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，
    这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后再继承接口B的实现类BB，这样我们可以在适配器P中访问接口B的方法了，
    这时我们在适配器P中的接口A方法中直接引用BB中的合适方法，这样就完成了一个简单的类适配器。


    实例： 笔记本（NoteBook）需要三相插口（ThreePlugInterface）接口     但是现有的只有两相插口（TwoPlugInterface）接口
            此时需要一个适配器（TwoPlugAdapter，TwoPlugAdapterExtends） 让笔记本可以通过适配器提供的三相插口（ThreePlugInterface）来使用两相插口（TwoPlugInterface）
            类适配器 ： TwoPlugAdapterExtends 通过继承的方式让笔记本可以通过适配器使用两相插口中的方法
            对象适配器：TwoPlugAdapter 通过组合的方式（将已有的两相接口作为私有属性组合到三相接口的适配器中）让笔记本可以通过适配器在三相接口中使用两相插口中的方法

            适配器：需要使用的接口的实现类（ThreePlugInterface）

    类适配器与对象适配器的使用场景一致，仅仅是实现手段稍有区别，二者主要用于如下场景：

    　　（1）想要使用一个已经存在的类，但是它却不符合现有的接口规范，导致无法直接去访问，这时创建一个适配器就能间接去访问这个类中的方法。

    　　（2）我们有一个类，想将其设计为可重用的类（可被多处访问），我们可以创建适配器来将这个类来适配其他没有提供合适接口的类。

    　　以上两个场景其实就是从两个角度来描述一类问题，那就是要访问的方法不在合适的接口里，一个从接口出发（被访问），一个从访问出发（主动访问）。

    接口适配器使用场景：

    　　（1）想要使用接口中的某个或某些方法，但是接口中有太多方法，我们要使用时必须实现接口并实现其中的所有方法，可以使用抽象类来实现接口，
         并不对方法进行实现（仅置空），然后我们再继承这个抽象类来通过重写想用的方法的方式来实现。这个抽象类就是适配器。