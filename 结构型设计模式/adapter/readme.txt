适配器模式 :
1 : 什么是适配器模式
 适配器模式将一个类的接口,转换成客户端期望的另外一个接口.使得原本由于接口不能兼容而不能一起工作的那些类可以在一起工作.

2 : 适配器分类

 2.1 组合
    采用组合方式的适配器成为 对象 适配器
    特点: 把被适配者(二相插座) 作为一个对象组合到适配器类中,以修改被适配接口(二相插座)包装成适配接口(三相插座),供需求者(NoteBook)使用
 2.2 继承
    采用继承方式的成为 类 适配器
    特点: 通过继承不兼容的类(二相插座类),实现对目标接口(三相插座)的匹配,单一的为某个类而实现的适配


3.适配器只是一种设计模式(有很多种的变体,不止上面两种才是适配器),只要是把不兼容的类转换为兼容的类供需求者只用,就可以成为适配器

4.作用
    4.1 透明 : 通过适配器,客户端(需求者)调用同一接口(ThreePlugInterface),因而对客户端来说是透明的.这样做更简单,更直接,更紧凑.
    4.2 重用 : 复用的现存的类(二相插座类GBTwoPlug)解决了现存类和复用环境要求(需要三相插座)不一致的问题
    4.3 低耦合 : 将目标类(三相插座)和适配者类(二相插座)解耦,通过引入一个适配器类重用现有的适配者类,而无需修改原有代码(遵循开闭原则)

补充 : 什么是开闭原则
开闭原则（OCP）是面向对象设计中“可复用设计”的基石，是面向对象设计中最重要的原则之一，其它很多的设计原则都是实现开闭原则的一种手段。
1988年，勃兰特·梅耶（Bertrand Meyer）在他的著作《面向对象软件构造（Object Oriented Software Construction）》中提出了开闭原则，它的原文是这样：“Software entities should be open for extension,but closed for modification”。翻译过来就是：“软件实体应当对扩展开放，对修改关闭”。这句话说得略微有点专业，我们把它讲得更通俗一点，也就是：软件系统中包含的各种组件，例如模块（Modules）、类（Classes）以及功能（Functions）等等，应该在不修改现有代码的基础上，引入新功能。开闭原则中“开”，是指对于组件功能的扩展是开放的，是允许对其进行功能扩展的；开闭原则中“闭”，是指对于原有代码的修改是封闭的，即修改原有的代码对外部的使用是透明的。