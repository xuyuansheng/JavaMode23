https://www.cnblogs.com/V1haoge/p/6497919.html

桥接模式：桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。
     　　这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。

意图：将抽象部分与实现部分分离，使它们都可以独立的变化。

主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。

使用场景：实现系统可能有多个角度分类（圆形：以颜色，大小 等等分），每一种角度都可能变化。

如何解决：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。


例子：这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。
   我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类(Shape)方法但是不同的桥接实现类，来画出不同的圆
eg： Shape redCircle = new Circle(new RedCircle(),100,100, 10);  通过实现类设置圆形的大小和位置  然后通过接口来给圆形设置上不同的颜色



个人理解：桥接是一个接口(DrawAPI)，它与一方应该是绑定的(RedCircle)，也就是解耦的双方中的一方必然是继承这个接口的，这一方就是实现方，
而另一方正是要与这一方解耦的抽象方(Shape)，如果不采用桥接模式，一般我们的处理方式是直接使用继承来实现(RedCircle extends Shape)，
这样双方之间处于强链接，类之间关联性极强，如要进行扩展，必然导致类结构急剧膨胀。
采用桥接模式，正是为了避免这一情况的发生，将一方(RedCircle)与桥(DrawAPI)绑定，即实现桥接口，
另一方在抽象类(Shape)中调用桥接口（指向的实现类），这样桥方可以通过实现桥接口进行单方面扩展，
而另一方可以继承抽象类而单方面扩展，而之间的调用就从桥接口来作为突破口，不会受到双方扩展的任何影响。